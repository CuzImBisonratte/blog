"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[518],{4369:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"ap55c-openwrt","metadata":{"permalink":"/ap55c-openwrt","source":"@site/blog/2025-09-07-sophos-openwrt/index.mdx","title":"Flashing a Sophos AP 55 (C) / 100 (C) with OpenWRT","description":"The school I go to had to replace all the old APs in the school. The head of IT asked two of my friends and me if we wanted to try and find some use-cases for the old APs, because he didn\'t want to throw them away.","date":"2025-09-07T00:00:00.000Z","tags":[],"readingTime":11.6,"hasTruncateMarker":true,"authors":[{"name":"Konstantin Protzen","title":"Hobby-Fullstack-Dev","url":"https://github.com/cuzimbisonratte","imageURL":"/img/konstantin.webp","key":"konstantin","page":null}],"frontMatter":{"slug":"ap55c-openwrt","title":"Flashing a Sophos AP 55 (C) / 100 (C) with OpenWRT","authors":["konstantin"]},"unlisted":false,"nextItem":{"title":"Automating IR Remote Control with Raspberry Pi Pico","permalink":"/radiopi"}},"content":"import Tabs from \\"@theme/Tabs\\";\\nimport TabItem from \\"@theme/TabItem\\";\\n\\nThe school I go to had to replace all the old APs in the school. The head of IT asked two of my friends and me if we wanted to try and find some use-cases for the old APs, because he didn\'t want to throw them away.\\n\\nWe thought about it and then we came up with the idea to flash OpenWRT on them. It worked! So here is how we did it.\\n\\n{/* truncate */}\\n\\n:::note Jump to the guide\\nThis blog post also contains a short summary of the steps we took to flash OpenWRT on the AP 55C.\\n\\nIf you just want to use this as a guide, you can skip the first part and jump to the [Tutorial section](#tutorial).\\n:::\\n\\n## The Tech & Concept\\n\\nThe Sophos AP 55C is a wireless access point that runs on a custom firmware which is already based on OpenWRT. The goal was to replace the Sophos firmware with a more open and customizable version - the default version - of OpenWRT.\\n\\n### Sophos AP 55 vs AP 55C\\n\\nThe Sophos AP 55C is the **C**eiling mountable version of the Sophos AP 55. The main difference is that the AP 55 has a square design with visible antennas, while the AP 55C has a round design and is meant to be mounted on ceilings. Both devices have similar hardware specifications, but the AP 55C is designed for a more discreet installation.\\n\\nThe important thing to note here is that the whilst both devices have a serial console port, the AP 55 has a RJ45 port for the console, while the AP 55C uses UART-Pins inside the device. This means that you need to open the AP 55C to access the console, while the AP 55 can be accessed via a standard RJ45 to Serial cable.\\n\\nThis means you also need different hardware to flash the devices. The AP 55 can be flashed with a standard USB to Serial adapter, while the AP 55C requires a UART adapter. (Or if you want to have another fun project, you can use a Raspberry Pi Pico as a USB-UART-bridge.)\\n\\n### Concept\\n\\nThe concept is quite simple. You need to connect to the serial console of the AP, interrupt the boot process and then use TFTP to upload the OpenWRT firmware to the device. After that, you can configure OpenWRT as you like.\\n\\n### Needed Hardware\\n\\n<Tabs groupId=\\"device\\">\\n\\t<TabItem value=\\"55\\" label=\\"AP 55\\">\\n\\n    \\t- The Sophos AP 55 itself\\n      - A USB to Serial RJ45 adapter (I recommend [this one](https://amzn.to/4meEwwE))\\n      - A computer\\n      - A PoE switch or injector\\n\\n  </TabItem>\\n  <TabItem value=\\"55c\\" label=\\"AP 55C\\" default>\\n\\n    \\t- The Sophos AP 55C itself\\n      - Two USB to Serial UART adapters (We used [this one](https://amzn.to/4m8o6ps))\\n      - A computer\\n      - A small screwdriver (to open the AP 55C)\\n      - A PoE switch or injector (We used a [TP-Link TL-PoE160S](https://amzn.to/42chkHW))\\n\\n  </TabItem>\\n</Tabs>\\n\\n## Tutorial\\n\\nThis section will guide you through the steps to flash OpenWRT on the Sophos AP 55C.\\n\\nAs with most Operating System installations, you will start off with a \\"Live image\\" of OpenWRT from which you will install the full version of OpenWRT. To provide the live image to the AP, we will use TFTP.\\n\\n### Step 1: Install a TFTP server\\n\\nFirst, you need to install a TFTP server on your computer.\\n\\n<Tabs groupId=\\"os\\">\\n  <TabItem value=\\"windows\\" label=\\"Windows\\">\\n\\n    \\tI have seen [TFTPD64](https://pjo2.github.io/tftpd64/) used for this. Download and install it. After that, open the program and set the \\"Current Directory\\" to the folder where you will store the OpenWRT initramfs-kernel.\\n\\n  </TabItem>\\n  <TabItem value=\\"linux\\" label=\\"Linux (debian-based)\\" default>\\n\\n    \\tOn Linux, i recommend you use `tftpd-hpa`. Install it with your package manager. For example, on Debian/Ubuntu, you can use:\\n\\n      ```bash\\n      sudo apt-get install tftpd-hpa\\n      sudo mkdir /srv/tftp\\n      ```\\n\\n      The directory `/srv/tftp` will be used as the TFTP root directory in which you will place the OpenWRT initramfs-kernel.\\n\\n  </TabItem>\\n</Tabs>\\n\\n### Step 2: Download the OpenWRT firmware\\n\\n<Tabs groupId=\\"device\\">\\n  <TabItem value=\\"55\\" label=\\"AP 55\\">\\n    Next, you need to download the OpenWRT firmware for the Sophos AP 55. You can find the firmware on the [OpenWRT downloads page](https://downloads.openwrt.org/).\\n\\n    Please check if the current Stable Release provides a firmware for the Sophos AP 55. If not, you can also use an older Release (At the time of writing this - 24.10.2 is the latest one i found that supports the AP 55).\\n\\n    You will find the firmware under:\\n\\n    `ath79 -> generic -> sophos_ap55-initramfs-kernel.bin`\\n\\n    and\\n\\n    `ath79 -> generic -> sophos_ap100-initramfs-kernel.bin`\\n\\n    Download both files and place them in the TFTP root directory you set up in Step 1.\\n\\n    :::info\\n    The AP 55 / AP 100 use nearly the same hardware. Therefore the AP 55 sometimes requires the AP 100 firmware to work properly. Just download both firmwares to be sure and the AP will choose the correct one.\\n    :::\\n\\n  </TabItem>\\n\\n  <TabItem value=\\"55c\\" label=\\"AP 55C\\" default>\\n\\n    Next, you need to download the OpenWRT firmware for the Sophos AP 55C. You can find the firmware on the [OpenWRT downloads page](https://downloads.openwrt.org/).\\n\\n    Please check if the current Stable Release provides a firmware for the Sophos AP 55C. If not, you can also use an older Release (At the time of writing this - 24.10.2 is the latest one i found that supports the AP 55C).\\n\\n    You will find the firmware under:\\n\\n    `ath79 -> generic -> sophos_ap55c-initramfs-kernel.bin`\\n\\n    and\\n\\n    `ath79 -> generic -> sophos_ap100c-initramfs-kernel.bin`\\n\\n    Download both files and place them in the TFTP root directory you set up in Step 1.\\n\\n    Then rename them to `uImage_AP55C` and `uImage_AP100C` respectively. (Without any file extension)\\n\\n    :::info\\n    The AP 55C / AP 100C use nearly the same hardware. Therefore the AP 55C sometimes requires the AP 100C firmware to work properly. Just download both firmwares to be sure and the AP will choose the correct one.\\n    :::\\n\\n  </TabItem>\\n</Tabs>\\n\\n### Step 3: Connect the AP to your TFTP-server\\n\\nConnect the main RJ45-Port of the AP (PoE-Port) to your computer with an Ethernet cable directly to the computer on which you set up the TFTP server.\\n\\nSet your computer to the static IPv4-Adress of `192.168.99.8`. The AP will use this to connect to the TFTP server. In the following, you can find instructions for Windows and Ubuntu (with Gnome). For other Operating Systems, please check the documentation of your OS.\\n\\n<Tabs groupId=\\"os\\">\\n  <TabItem value=\\"windows\\" label=\\"Windows\\">\\n\\n    \\tYou can set a static IP address in the Network and Sharing Center. Go to \\"Change adapter settings\\", right-click on your Ethernet adapter and select \\"Properties\\". Then select \\"Internet Protocol Version 4 (TCP/IPv4)\\" and click on \\"Properties\\". Here you can set the static IP address.\\n\\n  </TabItem>\\n  <TabItem value=\\"linux\\" label=\\"Ubuntu (Gnome)\\" default>\\n\\n      Under Ubuntu I find it easiest to set a static IP address via the GUI. Open the \\"Settings\\" application and go to the \\"Network\\" section. Here you can select your Ethernet adapter and set a static IP address.\\n\\n      This will look something like this:\\n\\n      ![Setting up static IP Address on Ubuntu 24](./ipv4-ubuntu.png)\\n  </TabItem>\\n</Tabs>\\n\\n### Step 4: Connect to the Serial Console of the AP\\n\\n<Tabs groupId=\\"device\\">\\n  <TabItem value=\\"55\\" label=\\"AP 55\\">\\n\\n    \\tConnect the USB to Serial RJ45 adapter to your computer and the AP. \\n\\n  </TabItem>\\n  <TabItem value=\\"55c\\" label=\\"AP 55C\\" default>\\n\\n    \\tFirst, open the AP 55C with a small screwdriver. You will find the UART pins on the mainboard. The pinout (with the RJ45-Port at the bottom) is as follows from left to right:\\n\\n      ```\\n      Pin 1: VCC (3.3V) - Do NOT connect this pin!\\n      Pin 2: GND\\n      Pin 3: RX\\n      Pin 4: TX\\n      ```\\n\\n      Connect the Adapters-USB to your computer. Then connect the GND, RX and TX pins of the AP to the corresponding pins of the USB to Serial adapters.\\n  </TabItem>\\n</Tabs>\\n\\nNow, you need to connect to the serial console of the AP. You can use any terminal program for this. I recommend [PuTTY](https://www.putty.org/) for Windows and `minicom` for Linux:\\n\\n<Tabs groupId=\\"os\\">\\n  <TabItem value=\\"windows\\" label=\\"Windows\\">\\n\\n    \\tOpen PuTTY and set the following settings:\\n\\n      - Connection type: Serial\\n      - Serial line: COMX (replace X with the number of your COM port)\\n      - Speed: 115200\\n\\n      Then click on \\"Open\\" to connect to the serial console.\\n\\n  </TabItem>\\n  <TabItem value=\\"linux\\" label=\\"Linux (debian-based)\\" default>\\n\\n    \\tYou can use `minicom` and `screen` to connect to the serial console. First, install them if you haven\'t already:\\n\\n      ```bash\\n      sudo apt-get install minicom screen\\n      ```\\n\\n      Now, you can connect to the serial console:\\n\\n      ```bash\\n      sudo screen /dev/ttyUSB0 115200\\n      ```\\n  </TabItem>\\n</Tabs>\\n\\n### Step 5: Interrupt the boot process\\n\\nNow, power on the AP. If it is already powered, you can just unplug and replug the power cable to your PoE switch or injector.\\n\\nAs soon as you see output on the serial console press Enter to interrupt the boot process. You should see a prompt like this:\\n\\n```bash\\nath>\\n```\\n\\nIf the output of the bootloader is garbage, follow these steps:\\n\\n<details>\\n    <summary>Fixing garbage output on the serial console</summary>\\n\\n    The garbage output is most likely caused by the AP being modified to use 7 data bits instead of the default 8 data bits for TX (**not also on RX**)!\\n\\n    To fix this you need to reconnect the RX route to the second USB to Serial adapter. Ground needs to be shared between both adapters and the AP.\\n    Then connect the second adapter to your computer and open a second terminal program (PuTTY or minicom).\\n\\n    On Putty you can set the data bits in the \\"Serial\\" section of the settings. Set it to 7 data bits and connect to the second adapter.\\n\\n    On minicom we used the following command to start minicom with 7 data bits:\\n\\n    ```bash\\n    sudo picocom -b 115200 -d 7 -p n -f n /dev/ttyUSB1\\n    ```\\n\\n    On the terminal with which you send commands to the AP, you can now type commands. The other terminal will show the output of the AP.\\n\\n    The moment the output gets garbage again, switch back to 8 bits by replacing the `-d 7` with `-d 8` in the picocom command or changing it in PuTTY.\\n\\n</details>\\n\\n### Step 6: Booting OpenWRT\\n\\nNow, you can boot OpenWRT from the TFTP server. To do this, type the following command in the serial console:\\n\\n```bash\\ntftpboot\\nsetenv fwaddr 0x9f070000\\nerase $fwaddr +$filesize\\ncp.b $fileaddr $fwaddr $filesize\\niminfo $fwaddr\\n```\\n\\nThis will prepare the AP with the Image from the TFTP server. If everything works, you should see `Verifying Checksum ... OK` in the output, then you can boot OpenWRT by running the `boot` command.\\n\\n### Step 7: Installing OpenWRT\\n\\nAfter OpenWRT has booted, you should connect the AP to the Internet by plugging the Ethernet cable from the TFTP-Server into your normal network.\\n\\nThe console connection is still active, as it is provided via UART (AP 55C) or a dedicated Console port (AP 55).\\n\\nChange up the network config of the AP to use DHCP using the text editor `nano`:\\n\\n```bash\\nnano /etc/config/network\\n```\\n\\nIn there replace the following lines:\\n\\n```diff\\nconfig interface \'lan\'\\n    option device \'br-lan\'\\n    // remove-start\\n    option proto \'static\'\\n    option ipaddr \'192.168.1.1\'\\n    option netmask \'255.255.255.0\'\\n    // remove-end\\n    // add-start\\n    option proto \'dhcp\'\\n    // add-end\\n    option ip6assign \'60\'\\n```\\n\\nand connect to the Internet using DHCP by running:\\n\\n```bash\\nservice network restart\\nping -c 1 openwrt.com\\n```\\n\\nIf the response of the ping is successful (0% packet loss), you can now install the full version of OpenWRT by running:\\n\\n```bash\\nsysupgrade https://downloads.openwrt.org/releases/24.10.2/targets/ath79/generic/openwrt-24.10.2-ath79-generic-sophos_ap100c-squashfs-sysupgrade.bin\\n```\\n\\n:::info\\nMake sure to replace the URL with the latest version of the OpenWRT firmware - same version as the initramfs-kernel you used to boot OpenWRT.\\n\\nAs with the initramfs-kernel it could be possible that you need to use the AP 100C firmware instead of the AP 55C firmware. You can see this when the installation fails with an error like \\"upgrade: Device sophos,ap55c not supported by this image\\".\\n:::\\n\\n### Step 8: Finalizing the installation\\n\\nAfter the installation is complete, the AP will reboot.\\n\\nYou will need to enable DHCP again on the AP, as the installation will reset the network config.\\n\\n<details>\\n    <summary>Enabling DHCP again</summary>\\n\\n    Change up the network config of the AP to use DHCP using the text editor `nano`:\\n\\n    ```bash\\n    nano /etc/config/network\\n    ```\\n\\n    In there replace the following lines:\\n\\n    ```diff\\n    config interface \'lan\'\\n        option device \'br-lan\'\\n        // remove-start\\n        option proto \'static\'\\n        option ipaddr \'192.168.1.1\'\\n        option netmask \'255.255.255.0\'\\n        // remove-end\\n        // add-start\\n        option proto \'dhcp\'\\n        // add-end\\n        option ip6assign \'60\'\\n    ```\\n\\n    and connect to the Internet using DHCP by running:\\n\\n    ```bash\\n    service network restart\\n    ping -c 1 openwrt.com\\n    ```\\n    \\n    If the response of the ping is successful (0% packet loss), you can now continue further.\\n</details>\\n\\nNow get the IP address of the AP by running:\\n\\n```bash\\nip a\\n```\\n\\nThen set a password for the `root` user by running:\\n\\n```bash\\npasswd\\n```\\n\\nThis will also be the password for the web interface of OpenWRT.\\n\\nAfter this you can access the web interface of OpenWRT by opening a web browser and navigating to `http://<IP_ADDRESS_OF_YOUR_AP>`.\\n\\nLogin with the username `root` and the password you set earlier.\\n\\nYou\'re done! You have successfully installed OpenWRT on your Sophos AP 55 (C) / 100 (C).\\n\\n## Conclusion\\n\\nInstalling OpenWRT on the AP is not really hard and takes about 15-30 minutes depending on your experience with this kind of stuff.\\n\\nAs the APs are approaching their end of life support from Sophos, masses of them can be found on FB-Marketplace, eBay or (my recommendation for germans) Kleinanzeigen. You can get them for around 20-30\u20ac which is a really good price for a PoE-capable access point with really decent performance. \\n\\nI hope you enjoyed this blog post and maybe you will also start running free software on your own devices.\\n\\nThanks to my teammates in school for working together on this project and thanks to the head of IT at [my school](https://lls-bad.de) for providing us with the hardware. Also thanks to [this tutorial](https://forum.openwrt.org/t/howto-installing-openwrt-on-sophos-ap-55-and-ap-100) for providing a good starting point and base for this project to build on.\\n\\n**And at last, thanks for reading this!**"},{"id":"radiopi","metadata":{"permalink":"/radiopi","source":"@site/blog/2024-10-31-radiopi/index.md","title":"Automating IR Remote Control with Raspberry Pi Pico","description":"I own a Music-System that is controlled by an IR-Remote. As I use it as a Speaker for my Computer I have to turn it on manually every time I want to use it. So I thought about automating the process with a Raspberry Pi Pico.","date":"2024-10-31T00:00:00.000Z","tags":[],"readingTime":5.31,"hasTruncateMarker":true,"authors":[{"name":"Konstantin Protzen","title":"Hobby-Fullstack-Dev","url":"https://github.com/cuzimbisonratte","imageURL":"/img/konstantin.webp","key":"konstantin","page":null}],"frontMatter":{"slug":"radiopi","title":"Automating IR Remote Control with Raspberry Pi Pico","authors":["konstantin"]},"unlisted":false,"prevItem":{"title":"Flashing a Sophos AP 55 (C) / 100 (C) with OpenWRT","permalink":"/ap55c-openwrt"},"nextItem":{"title":"Replacing XAMPP under Ubuntu","permalink":"/xampp-replacement"}},"content":"I own a Music-System that is controlled by an IR-Remote. As I use it as a Speaker for my Computer I have to turn it on manually every time I want to use it. So I thought about automating the process with a Raspberry Pi Pico.\\n\\n\x3c!-- truncate --\x3e\\n\\n## The Tech\\n\\nThe Music System is a PEAQ 310BT-SL. On the remote there is no part number or anything, so I can\'t really tell you what remote it is. But it is the one that comes with the Music System.  \\nThe Pi I use for this project is a Raspberry Pi Pico W. I chose the Pico because it is small and also I wanted to learn micropython.\\n\\n## Proof of Concept\\n\\nI started knowing nothing about the remote and how IR even works. But I knew that I can look through a camera and if the remote is working I can see the IR-LED lighting up. So I did that and saw the LED lighting up. So I knew that the remote is using IR.\\n\\n### Hardware setup\\n\\nI use a IR-Receiver on a board that has the output pins labelled as G, R and Y. The G pin is connected to the GND pin on the Pico, the R pin is connected to the 3V3 pin on the Pico and the Y pin is connected to pin 16 on the Pico.\\n\\n### Reading the Codes\\n\\nThen I looked around to find out how IR works on a Pi pico and found the following library: [Github: peterhinch/micropython_ir](https://github.com/peterhinch/micropython_ir). I installed it on the pi using Thonny and then used the code from the [receiver documentation](https://github.com/peterhinch/micropython_ir/blob/master/RECEIVER.md) to find out the used protocol:\\n\\n```python\\nfrom ir_rx.test import test\\nfrom ir_rx.acquire import test\\ntest()\\n```\\n\\nAfter 2 tries I found out that the remote uses the NEC protocol. I didn\'t know whether NEC_8 or NEC_16 is used, but I just tried NEC_8 - that didn\'t work. So I tried NEC_16 and that worked. So I knew that the remote uses the NEC_16 protocol.\\n\\nThen I used the following code to get the codes from the remote:\\n\\n```python\\nimport time\\nfrom machine import Pin\\nfrom ir_rx.nec import NEC_16  # NEC remote, 8 bit addresses\\n\\ndef callback(data, addr, ctrl):\\n    if data < 0:  # NEC protocol sends repeat codes.\\n        print(\'Repeat code.\')\\n    else:\\n        print(\'Data {:02x} Addr {:04x}\'.format(data, addr))\\n\\nir = NEC_16(Pin(16, Pin.IN), callback)\\nwhile True:\\n    time.sleep_ms(500)\\n```\\n\\n#### Codes from the Remote\\n\\nThe Adress given by the remote is always 0401. The Data is different for every button. Here are the codes I got:\\n\\n<details>\\n<summary>Table of the Codes</summary>\\n\\n| Button        | Data |\\n| ------------- | ---- |\\n| Power         | 04   |\\n| Eject Disk    | 08   |\\n| Menu          | 47   |\\n| 10-           | 4B   |\\n| Volume +      | 4C   |\\n| 10+           | 4D   |\\n| Back          | 4E   |\\n| Play/Pause    | 4F   |\\n| Forward       | 50   |\\n| Fold -        | 51   |\\n| Volume -      | 52   |\\n| Fold +        | 53   |\\n| Sleep Timer   | 54   |\\n| Intro         | 55   |\\n| Info          | 56   |\\n| Switch Source | 57   |\\n| EQ            | 59   |\\n| Stop          | 5A   |\\n| Prog          | 5B   |\\n| Show clock    | 5D   |\\n| Mute          | 5E   |\\n\\n</details>\\n\\n### Sending the Codes\\n\\nI used the following code to send the codes:\\n\\n```python\\nfrom machine import Pin\\nfrom ir_tx.nec import NEC\\n\\naddr = 0x0401\\ndata = 0x5E\\n\\nnec = NEC(Pin(17, Pin.OUT, value = 0))\\nnec.transmit(addr, data)\\n```\\n\\nAnd e\' voila, the Music System toggled the mute Function.\\n\\n## Making it a real working Project\\n\\nAfter knowing that the method I used works, I wanted to write a full on remote control.\\n\\nMy requirements were that I wanted to be able to trigger any command recorded from the remote via HTTP-Requests.  \\nUsing the micopython libraries `socket` and `network` I wrote the code to listen for HTTP-Requests and then send the corresponding IR-Code.\\n\\nAlso I wanted to have two other endpoints:  \\nOne to turn on the Music System, then switch to the correct source and then turn up the volume to maximum,\\nand one command to just turn up the volume to maximum.\\n\\nYou can find the full code on my [GitHub](https://github.com/CuzImBisonratte/RadioPi) or also here:\\n\\n<details>\\n<summary>Full Code</summary>\\n\\n```python\\n# Settings\\nADDR = 0x0401\\nDATA = {\\n    \\"power\\": 0x04,\\t\\"eject\\": 0x08,      \\"menu\\": 0x47,\\n    \\"10dwn\\": 0x4B,\\t\\"volUp\\": 0x4C,\\t    \\"10up\\": 0x4D,\\n    \\"back\\": 0x4E,\\t\\"pause\\": 0x4F,\\t    \\"frwd\\": 0x50,\\n    \\"foldDwn\\": 0x51,    \\"volDwn\\": 0x52,\\t    \\"foldUp\\": 0x53,\\n    \\"sleep\\": 0x54,\\t\\"intro\\": 0x55,\\t    \\"info\\": 0x56,\\n    \\"src\\": 0x57,\\t\\"eq\\": 0x59,\\t    \\"stop\\": 0x5A,\\n    \\"prog\\": 0x5B,\\t\\"clock\\": 0x5D,\\t    \\"mute\\": 0x5E\\n}\\nWIFI_SSID=\\"\\"\\nWIFI_PASS=\\"\\"\\n\\n# Libraries\\nimport time\\nimport socket\\nimport network\\nfrom machine import Pin\\nfrom ir_tx.nec import NEC\\n\\n# Network Stuff\\nnetwork.country(\'DE\')\\nwlan = network.WLAN(network.STA_IF)\\nwlan.active(True)\\nwlan.config(pm = 0xa11140) # Disable WiFi Standby\\nwlan.connect(WIFI_SSID, WIFI_PASS)\\n\\n# Webserver (API)\\naddr = socket.getaddrinfo(\'0.0.0.0\', 80)[0][-1]\\nserver = socket.socket()\\nserver.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\\nserver.bind(addr)\\nserver.listen(1)\\n\\n# Connect to wifi\\nwhile not wlan.isconnected() and wlan.status() >= 0:\\n    time.sleep(1)\\n\\n# Setup IR Blaster\\nnec = NEC(Pin(17, Pin.OUT, value = 0))\\n\\n# Webserver\\nwhile True:\\n    try:\\n        # Accept traffic\\n        conn, addr = server.accept()\\n        print(\'HTTP-Request von Client\', addr)\\n        request = conn.recv(1024)\\n        # Handle request\\n        request = str(request)\\n        request = request.split()\\n        if \\"/cmd/\\" in request[1]:\\n            cmd = request[1].replace(\\"/cmd/\\", \\"\\")\\n            print(cmd)\\n            if cmd in DATA:\\n                conn.send(\'HTTP/1.0 200 OK\\\\r\\\\nContent-type: application/json\\\\r\\\\n\\\\r\\\\n\')\\n                conn.send(\'{\\"success\\":true,\\"cmd\\":\\"\'+cmd+\'\\"}\')\\n                # Send IR Command\\n                nec.transmit(ADDR, DATA[cmd])\\n            else:\\n                conn.send(\'HTTP/1.0 404 NOT FOUND\\\\r\\\\nContent-type: application/json\\\\r\\\\n\\\\r\\\\n\')\\n                conn.send(\'{\\"cmd\\":\\"Not found\\"}\')\\n        # Custom command for max vol\\n        elif request[1] == \\"/volMax\\":\\n            for i in range(32):\\n                nec.transmit(ADDR, DATA[\\"volUp\\"])\\n                time.sleep(0.3)\\n            conn.send(\'HTTP/1.0 200 OK\\\\r\\\\n\\\\r\\\\n\')\\n        # Custom command for startup sequence\\n        elif request[1] == \\"/init\\":\\n            conn.send(\'HTTP/1.0 200 OK\\\\r\\\\n\\\\r\\\\n\')\\n            nec.transmit(ADDR, DATA[\\"power\\"])\\n            time.sleep(7.5)\\n            for i in range(4):\\n                nec.transmit(ADDR, DATA[\\"src\\"])\\n                time.sleep(1)\\n            time.sleep(5)\\n            for i in range(32):\\n                nec.transmit(ADDR, DATA[\\"volUp\\"])\\n                time.sleep(0.3)\\n        else:\\n            conn.send(\'HTTP/1.0 404 NOT FOUND\\\\r\\\\nContent-type: application/json\\\\r\\\\n\\\\r\\\\n\')\\n            conn.send(\'{\\"cmd\\":\\"Not found\\"}\')\\n        conn.close()\\n    except OSError as e:\\n        break\\n    except (KeyboardInterrupt):\\n        break\\n```\\n\\n</details>\\n\\nIt logs into the home wifi and then listens for HTTP-Requests on port 80.\\nAny command recorded can be run by sending a GET request to `/cmd/<COMMAND>`.\\n\\n## Conclusion\\n\\nReplacing a remote with a Raspberry Pi Pico is a fun project and also very useful.  \\nThe cost of everything (Pico, IR-Receiver, Wires) was around 5\u20ac, so it is also very cheap.\\n\\nI hope you enjoyed this blog post and maybe you will also try to automate your remote controlled devices.\\n\\n**Thanks for reading!**"},{"id":"xampp-replacement","metadata":{"permalink":"/xampp-replacement","source":"@site/blog/2024-08-01-xampp-replacement/index.md","title":"Replacing XAMPP under Ubuntu","description":"Hi,","date":"2024-08-01T00:00:00.000Z","tags":[{"inline":false,"label":"XAMPP","permalink":"/tags/xampp","description":"A web server solution package"},{"inline":false,"label":"Nginx","permalink":"/tags/nginx","description":"A web server like Apache"},{"inline":false,"label":"PHP","permalink":"/tags/php","description":"Server-Side Scripting Language"},{"inline":false,"label":"SQL","permalink":"/tags/sql","description":"Query Language for Databases"},{"inline":false,"label":"phpMyAdmin","permalink":"/tags/pma"},{"inline":false,"label":"MySQL","permalink":"/tags/mysql"},{"inline":false,"label":"MariaDB","permalink":"/tags/maria-db","description":"Replacement for a MySQL-Server"}],"readingTime":9.17,"hasTruncateMarker":true,"authors":[{"name":"Konstantin Protzen","title":"Hobby-Fullstack-Dev","url":"https://github.com/cuzimbisonratte","imageURL":"/img/konstantin.webp","key":"konstantin","page":null}],"frontMatter":{"slug":"xampp-replacement","title":"Replacing XAMPP under Ubuntu","authors":["konstantin"],"tags":["xampp","nginx","php","sql","phpmyadmin","mysql","mariadb"]},"unlisted":false,"prevItem":{"title":"Automating IR Remote Control with Raspberry Pi Pico","permalink":"/radiopi"},"nextItem":{"title":"Welcome","permalink":"/welcome"}},"content":"Hi,  \\nwhilst sitting on a train, I thought about finally setting up an alternative to XAMPP as that really only works on Windows and I switched to Linux a few months ago.\\n\x3c!-- truncate --\x3e\\n\\n## But why?\\n\\nI wanted to have a local server running on my machine to test some things and I didn\'t want to use Docker for that.  \\nI also didn\'t want to use XAMPP as even though it is available for Linux, it is not really as easy to use and because my servers all run on Linux, I wanted to have a similar environment on my local machine.\\n\\nSo in this blog-tutorial-explanation-whatever I will tell you step-by-step what I did to set up a local server on my machine.\\n\\nI use NGINX as my web server, because it is faster than Apache and I am used to it and therefore all my servers run NGINX. As a database I use MariaDB, because it is a easy to use software and again I already use it on my servers. For PHP I\'ll use PHP-FPM and for managing the Databases PHPMyAdmin.\\n\\n## Install all software\\n\\nTo setup all needed software just run the following command:\\n\\n```bash\\nsudo apt install nginx mariadb-server php-fpm php-mysql php-mbstring unzip\\n```\\n\\nWhilst installing the version number of PHP chosen will be shown multiple times, write it down, as you\'ll need it later. If you didn\'t already see it whilst installing, you can also query the version by running `php -v` (Only the first two parts of the version number will be needed - like \\"8.3\\")\\n\\n### Setup of NGINX\\n\\nTo setup multiple projects you could use differnt local hostnames, but I really like just using ports on localhost for different projects as it is one less step to setup.\\n\\nFor each of your projects create a file in the directory `/etc/nginx/sites-available/` and paste the following configuration file:\\n```yaml title=\\"/etc/nginx/sites-available/projectname\\"\\nserver {\\n\\n        // highlight-start\\n        # Choose a port you like\\n        listen 8081;\\n        listen [::]:8081;\\n        // highlight-end\\n\\n        server_name localhost;\\n\\n        // highlight-start\\n        # Point to where the files you want to serve are\\n        root /var/www/projectName;\\n        // highlight-end\\n        index index.php index.html;\\n\\n        location ~ \\\\.php$ {\\n                include snippets/fastcgi-php.conf;\\n\\n                // highlight-start\\n                # Set the PHP-Version by replacing \\"8.3\\"\\n                fastcgi_pass unix:/run/php/php8.3-fpm.sock;\\n                // highlight-end\\n        }\\n\\n        location / {\\n                try_files $uri $uri/ =404;\\n        }\\n}\\n```\\nAfter pasting set all values as you like where comments are (highlighted above).\\n\\nNow you need to link the file to activate it (and reload nginx) by running:\\n```bash\\nsudo ln -s /etc/nginx/sites-available/projectName /etc/nginx/sites-enabled/\\nsudo systemctl reload nginx\\n``` \\n\\n:::note Why the weird linking system?\\nThis _weird_ linking system makes it easy to deactivate a page when something goes wrong. The link to sites-enabled can just be deleted, whilst the original config file still stays the same. Therefore when the problem is solved, the link can just be re-applied and the configuration does not need to be rewritten.\\n:::\\n\\n### Setup of PHP\\n\\nWe need to enable the mysql extension for PHP as it will be needed for PHPMyAdmin.\\n\\nTo do that you need to edit the PHP-Configuration-File (Don\'t forget to replace with your Version-Number!):\\n```sudo nano /etc/php/8.3/fpm/php.ini```\\n\\nNow you need to find the line containing `extension=mysqli`. If you use nano for editing just press CTRL+w and enter `;extension=mysqli`.\\n\\nThen you need to remove the comment char from the start (remove the Semicolon)\\n\\nDo the same for the `mbstring`-extension too.\\n\\nAfter that, you just need to reload PHP by running:\\n```bash\\nsudo systemctl reload php8.3-fpm\\n```\\n\\n### Setup of MariaDB\\n\\n:::info\\nThe current versions of MariaDB sometimes have problems with authenticating the root user after installation. First, try the following steps normally, but if you have problems with the root user, you can find a solution here:\\n<details>\\n        <summary>Solution to fix `Access denied for user \'root\'@\'localhost\'`</summary>\\n\\n        If the root user can\'t authenticate, you can try to reset the root password by first forcing a MariaDB-Monitor (Like a SQL-Shell) to open by running:\\n        ```bash\\n        sudo mysql\\n        ```\\n        And then running the following SQL-Command:\\n        ```sql\\n        ALTER USER \'root\'@\'localhost\' IDENTIFIED VIA mysql_native_password USING PASSWORD(\'\');\\n        ```\\n        After that you can exit the MariaDB-Monitor by entering `exit` and then you can try to login with the root user again.\\n</details>\\n:::\\n\\nMariaDB comes with a configuration assistant, that makes the first steps easier. To use it run the following command: \\n```bash \\nmysql_secure_installation\\n```\\nNow there will be many questions asked, the following are my recommended settings:\\n\\n- You will be asked for the root password. Press Enter to continue (there is no password yet).\\n- You will be asked if you want to change authentication method. Enter **n** and press Enter to continue.\\n- You will be asked if you want to set a root password. Enter **n** and press Enter to continue.\\n- You will be asked if you want to remove anonymous users. Enter **y** and press Enter to continue.\\n- You will be asked if you want to disallow root login remotely. Enter **y** and press Enter to continue.\\n- You will be asked if you want to remove the test database and access to it. Enter **y** and press Enter to continue.\\n- You will be asked if you want to reload privilege tables now. Enter **y** and press Enter to continue.\\n\\nNow I recommend setting a password for the root account, to do that you will need to open the MariaDB-Monitor (which is like a SQL Shell) by running \\n```bash\\nmysql -u root\\n```\\nand in there you can run the following SQL-Command to set the root-user-Password:\\n```sql\\nALTER USER \'root\'@\'localhost\' IDENTIFIED VIA mysql_native_password USING PASSWORD(\'<YOUR-PASSWORD>\');\\n```\\nafter that you exit the MariDB-Monitor by entering `exit`.  \\n\\n:::warning\\nEven though remote root access is disabled it is a good idea to deny all access to the database server by denying the port in the firewall. If you are using UFW (Which is the default firewall for ubuntu), you can just run the following command:\\n```bash\\nsudo ufw deny 3306\\nsudo ufw enable\\n```\\n:::\\n\\n### Setup of PHPMyAdmin\\n\\nTo install PHPMyAdmin you need to first download it by navigating to [phpmyadmin.net](https://www.phpmyadmin.net/) and then pressing the green download button in the top right corner. This will download PHPMyAdmin.\\n\\nNow navigate to your Downloads and unzip it by running:\\n```bash\\nunzip FILENAME.zip\\n```\\n\\nAfter it unzipped, you need to move to folder:\\n```bash\\nsudo mv FOLDER /var/www/phpmyadmin\\n```\\n\\nAfter that you will need to set the owner of the PHPMyAdmin-Directory to the nginx user so PHPMyAdmin can write there. You can do that by running:\\n```bash\\nsudo chown www-data:www-data -R /var/www/phpmyadmin\\n```\\n\\nNow you will just need to create a NGINX-configuration file for PHPMyAdmin as in the Section [Setup of NGINX](#setup-of-nginx):\\n\\n```yaml title=\\"/etc/nginx/sites-available/phpmyadmin\\"\\nserver {\\n        listen 3333;\\n        listen [::]:3333;\\n\\n        server_name localhost;\\n\\n        root /var/www/phpmyadmin;\\n        index index.html index.php;\\n\\n        location ~ \\\\.php$ {\\n               include snippets/fastcgi-php.conf;\\n               fastcgi_pass unix:/run/php/php8.3-fpm.sock;\\n        }\\n\\n        location / {\\n                try_files $uri $uri/ =404;\\n        }\\n}\\n```\\n:::warning\\nDo not forget to set the PHP-Version and (if wanted) another Port AND to link the file to sites-enabled and reload NGINX as in the Section [Setup of NGINX](#setup-of-nginx)\\n\\nIf you don\'t want PHPMyAdmin to be accessible from other devices I strongly recommend denying it in your firewall by running:\\n```bash\\nsudo ufw deny 3333\\nsudo ufw reload\\nsudo ufw enable\\n```\\n:::\\n\\n## That\'s it\\n\\nNow everything is set up to work, just restart all services by just following the rest of the tutorial or by running the following commands:\\n\\n```bash\\nsudo systemctl reload nginx\\nsudo systemctl reload php8.3-fpm\\nsudo systemctl restart mariadb\\n```\\n\\n## Further setup\\n\\nFor easier development (and full functionality) I still recommend taking some quick steps:\\n\\n### Shortcut-Commands\\nAs you may use your device not only for development you may want to be able to turn on or off all services quickly.\\n\\nFor that you need to first disable them starting at system startup:\\n```bash\\nsudo systemctl disable nginx\\nsudo systemctl disable mariadb\\nsudo systemctl disable php8.3-fpm\\n```\\n\\nAnd then you can add a bash shortcut to make it easy to stop and start these services. You do that by appending the following to the .bash_aliases file (e.g. using `nano ~/.bash_aliases`):\\n```bash title=\\"~/.bash_aliases\\"\\n# Development services\\nalias devon=\\"sudo systemctl start php8.3-fpm && sudo systemctl start nginx && sudo systemctl start mariadb\\"\\nalias devoff=\\"sudo systemctl stop php8.3-fpm && sudo systemctl stop nginx && sudo systemctl stop mariadb\\"\\n```\\nAfter re-opening the terminal (or running `source ~/.bash_aliases`), you can use the commands `devon` and `devoff` to turn on or off your services easily.\\n\\n### Finish PHPMyAdmin Setup\\n\\nAll of the following changes will need you to change something in the PHPMyAdmin configuration found under `/var/www/phpmyadmin/config.inc.php`. This _tutorial_ will not contain every step but just which variable to fill to shorten it a bit.\\n\\nFirst you will need to copy the sample configuration file to the actual configuration file by running:\\n```bash\\nsudo cp /var/www/phpmyadmin/config.sample.inc.php /var/www/phpmyadmin/config.inc.php\\n```\\n\\nFrom now on you can edit the configuration file by running:\\n```bash\\nsudo nano /var/www/phpmyadmin/config.inc.php\\n```\\n\\n#### Blowfish-Secret\\nThe blowfish secret is a key used for encryption of the session cookies. You should set it in the configuration.\\n\\n1. Generate a 32-bit secret by running \\n```bash\\nphp -r \'echo bin2hex(random_bytes(32)) . PHP_EOL;\'\\n```\\n2. Set the config variable `$cfg[\'blowfish_secret\']` in the following format:\\n```\\n$cfg[\'blowfish_secret\'] = sodium_hex2bin(\'f16ce59f45714194371b48fe362072dc3b019da7861558cd4ad29e4d6fb13851\');\\n```\\n\\n#### Configuration Storage\\nSetting up configuration storage is a little bit more complicated.\\n\\nYou will need access to the sql directory within the phpmyadmin directory, so i recommend copying it to a user-accessible folder: ```sudo cp -r /var/www/phpmyadmin/sql ~/```\\n\\nAfter that open the MariaDB-Monitor by running ```mysql -u root -p``` and entering the password set at [Setup of MariaDB](#setup-of-mariadb).\\n\\nThen run the following command to create a new user called `pma` which is the control user for PHPMyAdmin (replace the `###PASSWORD###` with a new password for the control user):\\n```sql\\nCREATE USER \'pma\'@\'localhost\' IDENTIFIED VIA mysql_native_password USING PASSWORD(\'###PASSWORD###\');GRANT ALL PRIVILEGES ON *.* TO \'pma\'@\'localhost\' REQUIRE NONE WITH GRANT OPTION MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0; \\n```\\n\\nThen you will need to add the highlighted lines to the config:\\n```php title=\\"/var/www/phpmyadmin/config.inc.php\\"\\n$i++;\\n/* Authentication type */\\n$cfg[\'Servers\'][$i][\'auth_type\'] = \'cookie\';\\n/* Server parameters */\\n$cfg[\'Servers\'][$i][\'host\'] = \'localhost\';\\n$cfg[\'Servers\'][$i][\'compress\'] = false;\\n$cfg[\'Servers\'][$i][\'AllowNoPassword\'] = false;\\n// highlight-start\\n$cfg[\'Servers\'][$i][\'controluser\'] = \'pma\';\\n$cfg[\'Servers\'][$i][\'controlpass\'] = \'###PASSWORD###\';\\n// highlight-end\\n```\\n\\nTo finish the setup you will need to import the tables for the configuration storage by running the following command:\\n```bash\\nmysql -u root -p < ~/sql/create_tables.sql\\n```\\nIt will ask for the password of the root user and then import the tables.\\n\\nThat\'s it, you now have a fully working PHPMyAdmin setup.\\n\\n#### Theming PHPMyAdmin\\nAs I really like dark themes I always change the theme of PHPMyAdmin to a dark one. You can download themes from the [PHPMyAdmin-Theme-Repository](https://www.phpmyadmin.net/themes/) and then just extract them to the `/var/www/phpmyadmin/themes` directory.\\n\\n## Conclusion\\n\\nThat\'s it, you now have a fully working local server setup on your machine. I hope this tutorial was helpful and you can now easily develop your projects locally.\\n\\nThanks for reading :)"},{"id":"welcome","metadata":{"permalink":"/welcome","source":"@site/blog/2024-07-07-welcome/index.md","title":"Welcome","description":"Hi,","date":"2024-07-07T00:00:00.000Z","tags":[{"inline":false,"label":"ShareSimple","permalink":"/tags/sharesimple","description":"Simple and Easy-to-Use File-Sharing Service"},{"inline":false,"label":"Noten-App","permalink":"/tags/notenapp"},{"inline":false,"label":"OSLeM","permalink":"/tags/oslem","description":"OSLeM - OpenSource Legacy Manager"},{"inline":false,"label":"PresentStat","permalink":"/tags/presenstat","description":"Interactive polls in presentations"}],"readingTime":4.845,"hasTruncateMarker":true,"authors":[{"name":"Konstantin Protzen","title":"Hobby-Fullstack-Dev","url":"https://github.com/cuzimbisonratte","imageURL":"/img/konstantin.webp","key":"konstantin","page":null}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["konstantin"],"tags":["sharesimple","notenapp","oslem","presentstat"]},"unlisted":false,"prevItem":{"title":"Replacing XAMPP under Ubuntu","permalink":"/xampp-replacement"}},"content":"Hi,  \\nwelcome to this blog! This is the first post.\\n\\nI will be writing about various topics, including programming, software development, and other things.\\nAnd I will be sharing my thoughts and experiences with you.\\n\x3c!-- truncate --\x3e\\n\\n## Who am I?\\nFree-time programmer, interested in programming, software development and other IT-related-things.  \\nI am currently working on several projects, most of which are open source.  \\n\\nMy hometown is in Germany and I am currently still going to school.\\n\\n## What am I working on currently?\\n### Sharesimple\\nSharesimple is the most used project I am currently working on.\\nIt is a file sharing service that allows you to share files with others without having to register.\\n\\nThe idea behind it is to make file sharing as easy as possible, without any hassle.\\n\\nSo I asked myself how it would be possible to share files without having to sign up and still not have to worry about storage limits as the host.\\n\\nThe answer was simple, just limit the file size and the time the file is available.\\nSince I, as the hosting party, can see how many files are stored on the server and how much space they take up, I can easily estimate how much of the possible storage space will be used in the future and therefore limit the file size accordingly.\\n\\nThe project is fully open source and can be found on [GitHub](https://github.com/sharesimple).\\n\\nSo far the project has been well received and I am very happy about that.\\n\\nI am currently planning to add many new features to the project.\\nMy idea is to write an admin panel for the project, so that the hosting party can easily manage the files and see how much space is being used. It should also be possible to configure the service through the admin panel.  \\nAnother feature I am planning is to allow direct WebRTC file sharing, so that the files are not stored on the server, but are transferred directly from the sender to the receiver via WebRTC, with the help of an intermediary server that only establishes the connection and protects the privacy of the sender and receiver.\\n\\nThe last feature would include a new desktop client, which would necessarily include a new backend, as the current backend is not designed for external clients.  \\nI am not sure whether to write this as a PWA, which would be the easiest way to make it available on all platforms and would also be the easiest way for me to write it, or try to learn new languages and write it in one language so that it can be a native application on a limited number of platforms.\\n### Noten-App\\nNoten-App is a project I started a few years ago, but never really finished.\\n\\nIt is an app which allows Students to manage their grades and calculate their average grade. It also includes features like a homework planner.\\n\\nThe app sadly is really buggy and outdated, so I am planning to do a complete rewrite of the app if I find the time to do so, but in the meantime I am not working on it, which is sad because I think it is a really useful app, but there are more important things to do for me.\\n\\n### OSLeM\\nOSLeM is a new project for me, which leads me to get more into server-side programming in Node.js.\\n\\nIt is a project that is supposed to make it easy to manage your digital Legacy and to make sure that your data is not lost when you die, but is still protected from unauthorized access.\\n\\nThe project is still in the planning phase.\\n\\nMy idea is to write a server that stores the data and encrypts it in a way it can be decrypted only by the person who leaves the data behind OR by a person who has the decryption key or even require multiple peoples keys to decrypt the data.\\n\\nThe project is also planned to be open source.\\n\\nI also think about making it not only a web-app but also write a desktop client for it, so that the data can be accessed offline and the user can be sure that the data is not stored on a public-facing server, but the Legacy can also be managed by and be provided to a person that is not comfortable with using a web-app for this purpose.\\n\\n### PresentStat\\nThe last project I want to write about is PresentStat. \\n\\nPresentStat is a project that is supposed to make it easy to put interactive statistics into your presentations.\\n\\nThe project has a running prototype which is not yet ready for production, but I plan to release it when I find time for it.  \\nAs it is not a project that is very important to me, I only work on it when I have nothing else to do.\\n\\nThe project-prototype is also open source and can be found on [GitHub](https://github.com/cuzimbisonratte/presentstat).\\n\\nMy idea is to make it possible to create interactive statistics in your presentations, so that the audience can interact with the statistics and see immediately how the statistics change when the data changes.\\n\\nThe biggest feature I am currently planning is to make it possible for the server to stream automatically to YouTube, because some presentation softwares (e.g. Keynote on iPad) do not allow a Web-Page to be embedded into the presentation, but allow a video-stream to be embedded, so the only way to show the statistics would be to stream the statistics to YouTube and then embed the YouTube stream into the presentation.  \\nBut as that would be a very complex feature to code and switching to another window on the presenters computer is not really that hard, I am not sure if I will ever implement this feature."}]}}')}}]);